<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>给远方的TA寄一张明信片</title>
    <link href="/423/"/>
    <url>/423/</url>
    
    <content type="html"><![CDATA[<h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>于我而言，明信片似乎是遥远的记忆。<br>印象中，我没有真正意义上寄出过明信片，只记得拥有过一些精美的卡片，怀有一份寄往远方的心情。<br>记得曾有过米老鼠主题的系列明信片，印刷相当精致，其中一张印的是米奇在沙滩上打排球。曾经还收到过腾讯公司的新年明信片，缘由是小学的时候，参加了腾讯举办的一个新年活动。活动很简单，你留下地址，我邮寄卡片。<br>它们早已坠入时光的河流里无从寻觅。<br>一两年前的寒假，我收到了我表妹的一张卡片，印的是上海城隍庙。她在明信片中写道，我和她小时候曾经去过这儿，可是她已经了无印象。她还把“印象”写成了“映象”，一个很有趣的笔误。我对小时候的印象似乎也很淡了。这张明信片被我在书桌的玻璃下压了好久。<br>去年六月，我在网上定制了几十张明信片，卡片的封面大多是运动会等班级活动的时候，我给我的高中同学们拍摄的肖像照。  </p><h1 id="2020年的圣诞"><a href="#2020年的圣诞" class="headerlink" title="2020年的圣诞"></a>2020年的圣诞</h1><p>今年临近圣诞的时候，突然有了寄送明信片的冲动。我在网上购置了圣诞主题的卡片，又买了几十张邮票，第一次尝试寄送了明信片。  </p><h2 id="邮寄小结"><a href="#邮寄小结" class="headerlink" title="邮寄小结"></a>邮寄小结</h2><p>整个过程和我想象中的相似，却又略有不同，简要总结一下：  </p><h3 id="1-邮资"><a href="#1-邮资" class="headerlink" title="1. 邮资"></a>1. 邮资</h3><p>在国内，无论跨不跨省，明信片的邮资均为0.8元。（非挂号）<br>（然而我误买了许多1.2元的邮票，只能“奢侈”一把了。）</p><h3 id="2-邮寄信息填写"><a href="#2-邮寄信息填写" class="headerlink" title="2. 邮寄信息填写"></a>2. 邮寄信息填写</h3><p>邮寄明信片需要填写邮政编码，以及寄件人、收件人的详细地址和电话，以便准确送达。<br>（只写大学地址，不写具体宿舍的明信片会被放在学校传达室，不写电话号码的话似乎就完全不能送到收件人的手里了）</p><h3 id="3-邮寄"><a href="#3-邮寄" class="headerlink" title="3. 邮寄"></a>3. 邮寄</h3><p>选择一个邮筒，把明信片投进去。邮递员会在每日特定的时间开箱，将你的明信片带往远方；从好友传回的照片看，现在的明信片都会贴有跟踪条形码。  </p><h3 id="4-等待"><a href="#4-等待" class="headerlink" title="4. 等待"></a>4. 等待</h3><p>从我的个人经验角度讲，临近的城市寄送大概需要两天；而我寄出的两张跨省明信片至今（截止文章发出时）没有回音，不知是什么情况。  </p><h1 id="反思即时通讯"><a href="#反思即时通讯" class="headerlink" title="反思即时通讯"></a>反思即时通讯</h1><p>我以前很喜欢使用“即时通讯”工具与我的好朋友们建立联系，现在这份喜爱渐渐冷了下来，缘由就在于我发觉了这样的事实：“即时通讯”正在侵蚀我的生活。它看似轻易让我与各地的好朋友们紧密的联系在一起，却又让我和他们之间的距离变得好远好远；它看似提升了我的工作效率，却又以高密度的信息通知稀释我的注意力；它看似让我与他人沟通无阻，却又常常让我对他人在即时通讯中的文字表达感到困惑。<br>我当然不是那种总是对科技发展忧心忡忡的人，我想我仍是一位科技的乐天派。我只是看见“即时通讯”和我的生活靠得太近，我们的相处方式又并非合适，乃至对我构成了近在咫尺的威胁。<br>我下决心把即时通讯的通知关了，把QQ\微信当成电子邮箱。它们本就不是“即时”的通讯工具，因为“即时”只考虑到了技术层面，没有考虑到人的层面。我不愿意无时无刻受到它对我注意力的干扰，这种频繁的干扰，让人与人之间的联系廉价化，我是这么认为的。<br>每年春节，我都会给几位好朋友通电话。每次接到电话后，那几位都知道是我。很少有人在数字时代做这种行为，但我想我大概会做下去。  </p><h1 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h1><blockquote><p>说一些和本文无关的内容，毕竟今天是2020年的最后一天。  </p></blockquote><p>在这个即将结束的，波澜壮阔，却也暗流涌动的2020年的最后一天，我回望这一年的时间线，见到过去日子里都未曾见到的奇景，暴风雨与闪电，狂风与雪，春天的明媚和秋日的金黄银杏叶。我曾走在它们交织的集合里。很想书写下这些饱含情绪的故事，但现在的此刻，我只想向前走，向前走。<br>（好多课程要复习，我也没空写……)<br>    <strong>新年快乐！🎉</strong></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>山塘街与艺圃</title>
    <link href="/422/"/>
    <url>/422/</url>
    
    <content type="html"><![CDATA[<p><strong>「故事发生在2020.9.6」</strong>  </p><h1 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h1><p>开学前的最后一天，室友王某森（化名）兴致盎然，邀请我前往山塘街散心。  </p><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>山塘街远未达到我们心中的预期。相比苏州的艺圃所带给我的惊艳感，山塘街却令我感到不自在，感觉置身于诺大的道具舞台。<br>我和王某森讨论了这个问题，他也有相同的感受。<br>我想起去年在艺圃，园林中的假山与亭阁，无一处不为人造，身处其中却不觉得有任何刻意。  </p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这是为什么呢？<br>我给出的结论是这样的：艺圃与山塘街的分别，在于居民与过客之间的分野。艺圃为当地喝茶的老爷爷和看枫叶的老奶奶而存在，而山塘街为那些呼喝呐喊，熙攘过境的旅游团而生。有时候，环境不仅塑造人，人也常常成为环境中独特的组成部分。说到底，观察城市居民的生活要比挤在一堆游客中要来的有趣得多。  </p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>所以我不建议去山塘街🤨。<br>强烈推荐艺圃。  </p><h1 id="相关摄影"><a href="#相关摄影" class="headerlink" title="相关摄影"></a>相关摄影</h1><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/photos/IMG_20200906_153848.jpg" srcset="/img/loading.gif" alt="avatar"><br>图一：只能从校园北门出校，于是我们绕了一大圈才到达地铁口，在此途中，见一处光影的摇动。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/photos/DSCF4095-1.jpg" srcset="/img/loading.gif" alt="avatar"><br>图二：奇怪的山塘街<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/photos/DSCF4226-1.jpg" srcset="/img/loading.gif" alt="avatar"><br>图三：奇怪的山塘街2<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/photos/DSCF4116-1.jpg" srcset="/img/loading.gif" alt="avatar"><br>图四：山塘街旁的楼屋屋顶，很好看<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/photos/DSCF1961-1.jpg" srcset="/img/loading.gif" alt="avatar"><br>图五：去年于艺圃拍摄，喝茶的众人<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/photos/DSCF2046-01.jpg" srcset="/img/loading.gif" alt="avatar"><br>图六：去年于艺圃拍摄，拍枫叶🍁  </p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻松搭建个人博客——Gridea+GitHub Pages</title>
    <link href="/433/"/>
    <url>/433/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>如何拥有一个属于自己的博客网站？<br>过去，我会推荐使用WordPress或是Typecho搭建个人站点，但金钱成本（服务器租用）与时间成本（技术故障），常常会令非计算机爱好者望而却步。<br>稍早一些时候，我会推荐利用类似Hexo的博客框架结合GitHub Pages搭建静态博客。由于不需要租用服务器，几乎称得上是零成本。然而，使用者仍然需要面对黑漆漆的命令行，这恐怕对许多人来说也算不上友好。<br>直到前些日子，无意中看到介绍Gridea的文章，拍案叫绝：它等于是让以前的博客框架有了一套容易上手的GUI。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/1.png" srcset="/img/loading.gif" alt=""><br>这也是我为什么推荐Gridea：友好的图形客户端，简化的部署过程，易懂的后台设置，搭配GitHub Pages或Gitee搭建网站，非计算机爱好者也能够快速上手。<br>如此一来，就可以邀请身边的小伙伴们一起来搭博客啦🤣。<br><del>（暴露动机）</del>  </p><h1 id="1-配置过程"><a href="#1-配置过程" class="headerlink" title="1. 配置过程"></a>1. 配置过程</h1><ol><li><p>下载<a href="https://gridea.dev/#started" target="_blank" rel="noopener">Gridea</a><br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/2-2.png" srcset="/img/loading.gif" alt=""><br>在下载界面下载相应平台的客户端。主下载地址由于是从GitHub上下载，国内速度有可能比较缓慢，可以使用主下载地址下方列出的Gitee源。  </p></li><li><p>注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a><br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/2.png" srcset="/img/loading.gif" alt=""><br>按照相应提示注册GitHub。</p></li><li><p>点击左上角按钮(Create repository)创建一个仓库<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/3.png" srcset="/img/loading.gif" alt=""><br>仓库名称（Repository name)填写为[<em>你的用户名</em>].github.io，其他保持默认，点击创建(Create repository)。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/4.png" srcset="/img/loading.gif" alt=""></p></li><li><p>点击这里创建一个Token，如图勾选repo权限，最后点击提交。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/5.png" srcset="/img/loading.gif" alt=""></p></li><li><p>保存好生成的一大串字符。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/6.png" srcset="/img/loading.gif" alt=""></p></li><li><p>安装Gridea，在远程-基础配置内填写相关信息。<br>平台这里我们使用的是GitHub Pages，因此勾选，域名与仓库名这边可以先填写先前的[<em>你的用户名</em>].github.io，分支填写默认master，仓库用户名填写你的GitHub用户名，邮箱可填你的绑定邮箱，也可不填，令牌填写之前生成的token，CNAME用于自定义域名，这儿暂时不使用自己的域名，不填写。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/7.png" srcset="/img/loading.gif" alt=""></p></li><li><p>点击左下角“检测远程连接”，如果信息填写正确，就会出现相应提示，此刻就可以点击右下角保存按钮。你可以先点击预览，在本地查看生成的网站。之后，接着点击左下角的“同步按钮”，同步网站到仓库。  </p></li><li><p>接着你就可以通过浏览器访问网址：[<em>你的用户名</em>].github.io，查看你的网站了。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/9.png" srcset="/img/loading.gif" alt=""></p></li></ol><p>目前，整个配置工作基本就完成了！你接下来可以对博客进行个性化设置，更改网站名称，更换网站主题等等。  </p><h1 id="2-个性化博客"><a href="#2-个性化博客" class="headerlink" title="2. 个性化博客"></a>2. 个性化博客</h1><p>你可以在“主题”栏目的各个分支下更改各个配置项，比如在主题-基本配置下，你可以更改一个你喜欢的博客主题（点击进入<a href="https://gridea.dev/themes/" target="_blank" rel="noopener">主题市场</a>浏览更多主题），更改网站的名称以及更改其他杂项，在“自定义配置”下你可以更改网站的布局、颜色、社交链接、自定义CSS等等，你还可以在两外两个栏目里更改网页与头像图片。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/10.png" srcset="/img/loading.gif" alt=""><br>你还可以在远程-评论配置里打开评论框，由于是静态博客，并没有数据库，因此需要引入外部服务来实现评论功能。这儿建议使用Gitalk开源项目，Disqus在大陆地区由于被封锁无法使用。具体的开启方式会在下文谈及。<br>个性化操作完成后，记得点击保存。所有的更改完成后，记得点击同步按钮同步本地内容到网站上。   </p><h1 id="3-写文章"><a href="#3-写文章" class="headerlink" title="3. 写文章"></a>3. 写文章</h1><p>开始写文章！你可以先从更改默认的“关于”页面开始，点击进入。  </p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>你会发现博文中有一些符号，比如 <code>&gt;</code> 或者 <code>##</code>，它们都属于一种名叫Markdown的轻量级标记语言，这儿的<code>&gt;</code>代表“引用”，而<code>##</code>代表“二级标题”。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/11.png" srcset="/img/loading.gif" alt=""><br>MarkDown虽然叫“标记语言”，但其实仅仅是一种非常简单的标记（别被吓到啦🤣），和编程根本没有关系。它的目的是在纯文本种实现文本格式（比如在记事本中）（相对应的另一面是Word)。<br>以下罗列的是常用的Markdown语法：  </p><ul><li><code>#</code> 加上文字是一级标题，如<code># 一级标题</code><br>二级标题就是文字前加上两个<code>#</code>，以此类推;</li><li><code>**文字**</code> 表示<strong>加粗</strong>；  </li><li><code>*文字*</code> 表示<em>斜体</em>；  </li><li>文字前加 <code>&gt;</code> 表示引用；  </li><li>空白行输入 <code>* * *</code> 生成分割线；</li><li>无序列表：文字前加 <code>*</code>（或 <code>+</code>、<code>-</code>），如<code>* 文字</code></li><li>有序列表：数字加英文句号，如<code>1. 文字 2. 文字 3. 文字</code></li><li>插入超链接：<code>[显示文本](链接地址)</code></li><li>插入图片：<code>![](图片链接地址)</code>    </li></ul><p>MarkDown的语法大部分都十分易懂，但“插入图片”的语法的确有些繁琐，你可以在写作界面的右侧栏，点击图片的小图标，通过系统界面选取本地图片轻松插入。<br>通过MarkDown写作的好处在于，你可以完全专注于文字内容本身，而无需为他物所干扰；同时，你可以在软件数据目录（<code>~/Documents/Gridea</code>）找到后缀为<code>md</code>的文章文件，你可以通过记事本打开查看，有一天如果你厌倦了使用Gridea，你也可以随时将所有内容迁移到任何支持MarkDown的平台。  </p><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><p>右边的侧栏除了可以轻松插入图片、表情，还可以通过设置小图标设置文章的标签、创建时间、封面图、自定义的URL、是否置顶/隐藏等等。<br>你还可以点击<code>···</code>插入“摘要分隔符”，光标之前的内容将会作为摘要，显示在首页的文章摘要上。</p><h2 id="最后步骤"><a href="#最后步骤" class="headerlink" title="最后步骤"></a>最后步骤</h2><p>写作完成后，点击右上角的绿色✔，发布文章，也可以点击灰色✔存为草稿。点击回退 ← 回到主界面。你可以点击同步按钮，把你的更改内容同步到网站上！  </p><h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>刚才更改的是默认的关于页面，现在你就可以新建一篇全新的博文啦。记得如果要让本地内容同步到网站上，需要点击同步按钮进行同步操作。  </p><h1 id="4-探索更多"><a href="#4-探索更多" class="headerlink" title="4. 探索更多"></a>4. 探索更多</h1><p>实际上，你可能会觉得你的网站在某些方面还不算是一个网站，比如，你的博客地址仍然是一个子域名（如：yihang-demo.github.io)，而不是类似于”yharea.com”的二级域名（😂）。又比如，你的博客没有评论框，一个网站不能评论怎么行，小伙伴应该怎样给你的精彩内容评论呢？（😂）接下来，我要讲讲如何自定义域名以及如何配置Gitalk评论框。</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><h3 id="什么是域名？"><a href="#什么是域名？" class="headerlink" title="什么是域名？"></a>什么是域名？</h3><p>什么是域名呢？你可以搜索它的定义。通俗来讲，域名犹如网络上的便于人们记忆的地名，而IP地址对应着网络上的门牌号。我们访问各个网站，实际上是在访问它的IP地址。但记住网站的IP地址，就犹如记住精确的门牌号一般不便于人们记忆。通常我们在地址栏访问百度，并不会输入百度的IP地址，而是会输入<code>www.baidu.com</code>，由DNS告知我们百度的IP地址是什么。DNS犹如出租车老司机，熟知各种地名对应的具体位置，你登上他的车，说“去百度！”，他就把车辆驶向百度服务器的精确位置。<br>如今的移动互联网时代，浏览器不再是唯一的入口，域名的重要性也明显被弱化了，藏在一个个APP的界面之下。</p><h3 id="拥有域名的好处？"><a href="#拥有域名的好处？" class="headerlink" title="拥有域名的好处？"></a>拥有域名的好处？</h3><p>拥有一个域名有什么好处？一方面，别人可以更容易地通过输入地址进入你的网站，比如我的网站名叫“艺航领域”，就对应“yharea”，相对来说就比xxx.github.io这类子域名更加方便。<br>此外，你还可以用自己的域名作为自己邮箱的后缀，比如<a href="mailto:email@yharea.com">email@yharea.com</a>，你可以免费通过网易企业邮箱、腾讯企业邮箱、Yandex企业邮箱配置自己的个性化后缀邮箱，相关内容可以网上搜索。你还可以用域名做到很多其他的事情，在此不再赘述。  </p><h3 id="如何拥有一个自己的域名？"><a href="#如何拥有一个自己的域名？" class="headerlink" title="如何拥有一个自己的域名？"></a>如何拥有一个自己的域名？</h3><p>你可以向国内外的域名注册商申请注册。国内你可以选择<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>，<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>等平台，国外可以选择<a href="https://www.namesilo.com/" target="_blank" rel="noopener">NameSilo</a>，<a href="https://www.godaddy.com/" target="_blank" rel="noopener">Godaddy</a>等等。注册需要按年支付费用，<code>.top</code>域名和<code>.xyz</code>域名相对会便宜一些。同时还要注意首年费用和续费费用的区别，并且货比三家，免得掉到坑里。<br>同时，国内平台的域名注册与国外平台不同，现在需要实名认证，具体在各平台上操作完成。  </p><h3 id="注册完后的操作"><a href="#注册完后的操作" class="headerlink" title="注册完后的操作"></a>注册完后的操作</h3><ol><li>打开域名的DNS解析界面，添加两个个CNAME（别名）解析，一个名称填<code>www</code>，地址填写你的子域名地址（如yihang-demo.github.io)。另一个名称填<code>@</code>（相当于空），地址随意在以下四个IP中选择一个：  </li></ol><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/12-13.png" srcset="/img/loading.gif" alt=""></li></ul><ol start="2"><li>打开Gridea，编辑 后台-CNAME，把CNAME更改为你的域名，比如 yharea.com 或 <a href="http://www.yharea.com" target="_blank" rel="noopener">www.yharea.com</a> 。（加不加www都可以）  </li><li>同步，之后等待解析生效，之后就能通过域名访问网站啦！<br>你还可以在仓库设置里为网站开启强制HTTPS。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/14.png" srcset="/img/loading.gif" alt=""><p class="note note-warning">这儿顺便一提，这儿是将域名解析到GitHub Pages上，由于GitHub Pages是国外的服务，因此不需要做额外操作；如果你需要解析到国内IP，比如日后租用国内服务器做网站，你需要备案你的域名。  </p></li></ol><h2 id="配置Gitalk评论框"><a href="#配置Gitalk评论框" class="headerlink" title="配置Gitalk评论框"></a>配置Gitalk评论框</h2><ol><li>点击<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">这里</a>创建一个新的OAuth程序，这儿的网址都填写实际的网站网址（如果自定义了域名就都填自定义的域名），并获得Client ID等相关信息。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/15-0.png" srcset="/img/loading.gif" alt=""><br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/15.png" srcset="/img/loading.gif" alt=""></li><li>打开Gridea-远程-评论配置，打开“是否显示评论”开关，输入之前OAuth应用的相关信息，Owner就是GitHub用户名。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/16-0.png" srcset="/img/loading.gif" alt=""></li><li>保存，同步。</li><li>打开文章页面查看评论框效果，Gitalk的原理是利用GitHub的仓库issue作为评论，因此必须为页面手动初始化（开issue）。首先需要点击登录进行授权，再回到文章页面，这个页面的文章评论框就可以正常工作了。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/16.png" srcset="/img/loading.gif" alt=""><br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/17.png" srcset="/img/loading.gif" alt=""><br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/gridea/18.png" srcset="/img/loading.gif" alt=""><h1 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5. 写在最后"></a>5. 写在最后</h1>很高兴你看到了这儿，写出这篇博文耗费了我一些时间。如果你问我，为什么要花费精力去建立自己的个人博客，我不一定能给出非常明晰的答案。<br>可以观察到的是，互联网正在走向封闭，微信公众号、知乎专栏、微博等等平台，甚至是搜索引擎，都在竭力将流量死死地封锁在自己的领域里。很多时候，我们浏览信息的入口不再是浏览器，而是APP。<br>这是好是坏？<br>我相信，独立的闭环，带来的是平台方在其平台内不受钳制的power。因为这种闭环会导致信息迁移的困难。用户面对庞大的平台方，往往唯有进与退两种选择；平台上的社交关系等等个人信息，往往带不走。<br>我是相信那句话的，“Power corrupts; absolute power corrupts absolutely.”。当一篇平台上的文章，可以仅仅因为对平台公司做出批评而消失，当你面对了这种对信息的失控感时，我想，你一定有属于自己的答案。 </li></ol><p>另附上Gridea官方博客的一段话：</p><blockquote><p>为了能够让你找回当年写博客的那个劲儿，又或者在这个快、短社交时代，能够有一个独立的地方，一个属于自己的地方来记录下一些内容。能够让自己的声音不会随着各种信息流而流逝。 ——Gridea</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gridea</tag>
      
      <tag>GitHub Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现校园网自动化登录——Python/cURL脚本+任务计划/Tasker&amp;Termux（Windows/Android)</title>
    <link href="/421/"/>
    <url>/421/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>每次使用校园网都需要网页登录，十分麻烦。<br>以脚本代替操作，并使其在特定条件下自动运行。</p><p>参考：<br><a href="https://blog.csdn.net/shenhuaifeng/article/details/78333851" target="_blank" rel="noopener">python实现校园网自动登录-shenhuaifeng</a><br><a href="https://www.cnblogs.com/roadwide/p/10479723.html" target="_blank" rel="noopener">校园网开机自动登录-RodeWide</a><br><a href="https://www.zhihu.com/question/50249683/answer/120583718" target="_blank" rel="noopener">如何设置计划任务或者脚本才能使电脑在连接指定wifi后自动运行某程序？ - 蒋晟的回答 - 知乎</a><br><a href="https://www.zhihu.com/question/50249683/answer/950791896" target="_blank" rel="noopener">如何设置计划任务或者脚本才能使电脑在连接指定wifi后自动运行某程序？ - 笨笨侠的回答 - 知乎</a><br><a href="https://www.jianshu.com/p/c239a7eaadba" target="_blank" rel="noopener">安卓termux折腾手记：安装python库+tasker调用 - 红色番茄酱 - 简书</a><br><a href="https://www.cnblogs.com/jiangleads/p/10636696.html" target="_blank" rel="noopener">curl命令实现上网认证登录 - chinagod - 博客园</a></p><h1 id="1-Windows"><a href="#1-Windows" class="headerlink" title="1.Windows"></a>1.Windows</h1><p>操作环境：Windows 10    </p><h2 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h2><p>登录脚本可以用Python或cURL写，后者可能更简单。  </p><h3 id="第一种：Python"><a href="#第一种：Python" class="headerlink" title="第一种：Python"></a>第一种：Python</h3><p>需要python及requests库  </p><p>构造两个个文件，分别为  </p><ol><li>autologin.py  </li><li>auto-login.bat   </li></ol><p>每次运行第二个文件。可将文件二添加至计划任务，实现登录自动化。  </p><h4 id="1-autologin-py"><a href="#1-autologin-py" class="headerlink" title="1. autologin.py"></a>1. autologin.py</h4><p>这儿使用Chrome的开发者工具抓包。主要参考了<a href="https://blog.csdn.net/shenhuaifeng/article/details/78333851" target="_blank" rel="noopener">shenhuaifeng</a> 的文章。  </p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/network.jpg" srcset="/img/loading.gif" alt=""></p><pre><code class="python">python<span class="keyword">import</span> requests<span class="comment">#登录地址</span>post_addr=<span class="string">"http://xxx.xxx"</span><span class="comment">#构造头部信息</span>post_header={ <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,<span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,<span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,<span class="string">'Content-Length'</span>: <span class="string">'73'</span>,<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,<span class="string">'Cookie'</span>: <span class="string">'xxxxxx'</span>,<span class="string">'Host'</span>: <span class="string">'xxxxxx'</span>,<span class="string">'Origin'</span>: <span class="string">'http://xxxxxx'</span>,<span class="string">'Referer'</span>: <span class="string">'http://xxxxxx/'</span>,<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36'</span>,<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>}<span class="comment">#构造登录数据</span>post_data={ <span class="string">'username'</span>: <span class="string">'xxxxxx'</span>,<span class="string">'domain'</span>: <span class="string">'xxxxxx'</span>,<span class="string">'password'</span>: <span class="string">'xxxxxxx'</span>,<span class="string">'enablemacauth'</span>: <span class="string">'0'</span>   } <span class="comment">#发送post请求登录网页</span>requests.post(post_addr,data=post_data,headers=post_header)</code></pre><h4 id="2-auto-login-bat"><a href="#2-auto-login-bat" class="headerlink" title="2. auto-login.bat"></a>2. auto-login.bat</h4><pre><code class="cmd">@<span class="built_in">echo</span> offpython autologin.py</code></pre><h3 id="第二种：cURL"><a href="#第二种：cURL" class="headerlink" title="第二种：cURL"></a>第二种：cURL</h3><p>需要安装cURL。<br>构建一个文件：  </p><h4 id="1-auto-login-bat"><a href="#1-auto-login-bat" class="headerlink" title="1. auto-login.bat"></a>1. auto-login.bat</h4><p>抓包，在Chrome开发者工具中,右击登录相关的字段，选择Copy-&gt;Copy all as cURL(<strong>cmd</strong>)，粘贴进文件，就能作为脚本运行了。（如图）<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/curl2.png" srcset="/img/loading.gif" alt="">  </p><h2 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h2><p>接着添加计划任务，思路是在指定WIFI连接时运行脚本。在此使用Windows任务计划程序实现。具体操作 <a href="https://www.zhihu.com/question/50249683/answer/950791896" target="_blank" rel="noopener">笨笨侠的回答</a> 讲的已经很详细了，当然下文我会重复一下。  </p><h3 id="现成的xml文件"><a href="#现成的xml文件" class="headerlink" title="现成的xml文件"></a>现成的xml文件</h3><p>如果你懒得看具体实现过程，可以直接把以下内容存成xml文件导入。  </p><p class="note note-warning">注意先把‘Your WiFi Network’改成对应的WIFI的ssid，把"C:\Users\xxx\Desktop\code\auto-login.bat"改成正确的脚本路径。</p>  <pre><code class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-16"?&gt;</span><span class="tag">&lt;<span class="name">Task</span> <span class="attr">version</span>=<span class="string">"1.2"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/windows/2004/02/mit/task"</span>&gt;</span>  <span class="tag">&lt;<span class="name">RegistrationInfo</span>&gt;</span>    <span class="tag">&lt;<span class="name">Date</span>&gt;</span>2020-05-10T18:27:20.9384374<span class="tag">&lt;/<span class="name">Date</span>&gt;</span>    <span class="tag">&lt;<span class="name">Author</span>&gt;</span>YIHANG\kuail<span class="tag">&lt;/<span class="name">Author</span>&gt;</span>    <span class="tag">&lt;<span class="name">URI</span>&gt;</span>\校园网自动登录<span class="tag">&lt;/<span class="name">URI</span>&gt;</span>  <span class="tag">&lt;/<span class="name">RegistrationInfo</span>&gt;</span>  <span class="tag">&lt;<span class="name">Triggers</span>&gt;</span>    <span class="tag">&lt;<span class="name">EventTrigger</span>&gt;</span>      <span class="tag">&lt;<span class="name">Enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Enabled</span>&gt;</span>      <span class="tag">&lt;<span class="name">Subscription</span>&gt;</span><span class="symbol">&amp;lt;</span>QueryList<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>Query Id="0" Path="Microsoft-Windows-WLAN-AutoConfig/Operational"<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>Select Path="Microsoft-Windows-WLAN-AutoConfig/Operational"<span class="symbol">&amp;gt;</span>*[System[Provider[@Name='Microsoft-Windows-WLAN-AutoConfig'] and (EventID=8001)]][EventData[Data[@Name='SSID']='Your WiFi Network']]<span class="symbol">&amp;lt;</span>/Select<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/Query<span class="symbol">&amp;gt;</span><span class="symbol">&amp;lt;</span>/QueryList<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">Subscription</span>&gt;</span>    <span class="tag">&lt;/<span class="name">EventTrigger</span>&gt;</span>  <span class="tag">&lt;/<span class="name">Triggers</span>&gt;</span>  <span class="tag">&lt;<span class="name">Principals</span>&gt;</span>    <span class="tag">&lt;<span class="name">Principal</span> <span class="attr">id</span>=<span class="string">"Author"</span>&gt;</span>      <span class="tag">&lt;<span class="name">UserId</span>&gt;</span>S-1-5-21-4166746293-2997821899-17540147-1001<span class="tag">&lt;/<span class="name">UserId</span>&gt;</span>      <span class="tag">&lt;<span class="name">LogonType</span>&gt;</span>InteractiveToken<span class="tag">&lt;/<span class="name">LogonType</span>&gt;</span>      <span class="tag">&lt;<span class="name">RunLevel</span>&gt;</span>LeastPrivilege<span class="tag">&lt;/<span class="name">RunLevel</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Principal</span>&gt;</span>  <span class="tag">&lt;/<span class="name">Principals</span>&gt;</span>  <span class="tag">&lt;<span class="name">Settings</span>&gt;</span>    <span class="tag">&lt;<span class="name">MultipleInstancesPolicy</span>&gt;</span>IgnoreNew<span class="tag">&lt;/<span class="name">MultipleInstancesPolicy</span>&gt;</span>    <span class="tag">&lt;<span class="name">DisallowStartIfOnBatteries</span>&gt;</span>false<span class="tag">&lt;/<span class="name">DisallowStartIfOnBatteries</span>&gt;</span>    <span class="tag">&lt;<span class="name">StopIfGoingOnBatteries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">StopIfGoingOnBatteries</span>&gt;</span>    <span class="tag">&lt;<span class="name">AllowHardTerminate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">AllowHardTerminate</span>&gt;</span>    <span class="tag">&lt;<span class="name">StartWhenAvailable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">StartWhenAvailable</span>&gt;</span>    <span class="tag">&lt;<span class="name">RunOnlyIfNetworkAvailable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">RunOnlyIfNetworkAvailable</span>&gt;</span>    <span class="tag">&lt;<span class="name">IdleSettings</span>&gt;</span>      <span class="tag">&lt;<span class="name">StopOnIdleEnd</span>&gt;</span>true<span class="tag">&lt;/<span class="name">StopOnIdleEnd</span>&gt;</span>      <span class="tag">&lt;<span class="name">RestartOnIdle</span>&gt;</span>false<span class="tag">&lt;/<span class="name">RestartOnIdle</span>&gt;</span>    <span class="tag">&lt;/<span class="name">IdleSettings</span>&gt;</span>    <span class="tag">&lt;<span class="name">AllowStartOnDemand</span>&gt;</span>true<span class="tag">&lt;/<span class="name">AllowStartOnDemand</span>&gt;</span>    <span class="tag">&lt;<span class="name">Enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Enabled</span>&gt;</span>    <span class="tag">&lt;<span class="name">Hidden</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Hidden</span>&gt;</span>    <span class="tag">&lt;<span class="name">RunOnlyIfIdle</span>&gt;</span>false<span class="tag">&lt;/<span class="name">RunOnlyIfIdle</span>&gt;</span>    <span class="tag">&lt;<span class="name">WakeToRun</span>&gt;</span>false<span class="tag">&lt;/<span class="name">WakeToRun</span>&gt;</span>    <span class="tag">&lt;<span class="name">ExecutionTimeLimit</span>&gt;</span>PT72H<span class="tag">&lt;/<span class="name">ExecutionTimeLimit</span>&gt;</span>    <span class="tag">&lt;<span class="name">Priority</span>&gt;</span>7<span class="tag">&lt;/<span class="name">Priority</span>&gt;</span>  <span class="tag">&lt;/<span class="name">Settings</span>&gt;</span>  <span class="tag">&lt;<span class="name">Actions</span> <span class="attr">Context</span>=<span class="string">"Author"</span>&gt;</span>    <span class="tag">&lt;<span class="name">Exec</span>&gt;</span>      <span class="tag">&lt;<span class="name">Command</span>&gt;</span>C:\Users\xxx\Desktop\code\auto-login.bat<span class="tag">&lt;/<span class="name">Command</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Exec</span>&gt;</span>  <span class="tag">&lt;/<span class="name">Actions</span>&gt;</span><span class="tag">&lt;/<span class="name">Task</span>&gt;</span></code></pre><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>创建一个任务，命名一个名称，如：“校园网自动登录”。接着为这个任务添加一个自定义的触发器：新建-&gt;触发器-&gt;开始任务-&gt;发生事件时-&gt;自定义-&gt;新建事件筛选器<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/TASK333.png" srcset="/img/loading.gif" alt=""></li><li>按日志 -&gt; 事件日志-(应用程序和服务日志)-Microsoft-Windows-WLAN-AutoConfig/Operational -&gt; 事件来源-WLAN-AutoConfig -&gt; 事件ID-8001 -&gt; XML<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/TASK222.png" srcset="/img/loading.gif" alt=""></li><li>勾选“手动编辑查询” -&gt; 在<code>&lt;/Select&gt;</code>前增加代码<code>[EventData[Data[@Name=&#39;SSID&#39;]=&#39;Your WiFi Network&#39;]]</code><br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/TASKER8.jpg" srcset="/img/loading.gif" alt=""></li><li>确定以后，在选择触发时运行的脚本：操作-&gt;新建-&gt;启动程序-程序或脚本，填入程序路径<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/TASK111.png" srcset="/img/loading.gif" alt=""></li><li>你还可能需要在条件选项卡里面去除勾选“只有在计算机使用交流电源时才启动此任务”，以避免未接通电源时脚本停止工作。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/TASK13.jpg" srcset="/img/loading.gif" alt="">    </li></ol><h3 id="2020-8-9更新"><a href="#2020-8-9更新" class="headerlink" title="2020.8.9更新"></a><strong>2020.8.9更新</strong></h3><p>如果是Python脚本，任务计划还可以这样设置：<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/TASK111-2.png" srcset="/img/loading.gif" alt="">  </p><ul><li>第一栏填写Python安装目录下的pythonw.exe的完整路径  </li><li>第二栏填写Python脚本目录</li><li>第三栏填写Python安装目录的完整路径  </li></ul><h1 id="2-Android"><a href="#2-Android" class="headerlink" title="2.Android"></a>2.Android</h1><p>光实现电脑的校园网自动登录也许远远不够，以下是手机端（Android）实现方法。<br>操作环境：MIUI11 (Android Q)<br>需要手机软件:  </p><ul><li>Tasker （<a href="https://www.coolapk.com/apk/net.dinglisch.android.taskerm" target="_blank" rel="noopener">酷安</a>）   </li><li>Termux（<a href="https://f-droid.org/packages/com.termux/" target="_blank" rel="noopener">F-droid</a>）  </li><li>Termux:Tasker (<a href="https://f-droid.org/zh_Hans/packages/com.termux.tasker/" target="_blank" rel="noopener">F-droid</a>)  <h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2>先简单介绍一下这三个软件： </li></ul><blockquote><p>Tasker是一个让安卓系统根据用户定制的”配置文件”(Profiles)，在特定的”背景”下(Contexts)，执行指定”任务”(Tasks)的软件 （Tasker)  </p></blockquote><p class="note note-primary">哈哈哈，听上去是不是和任务计划很像？  Tasker真可谓一大神器，可以做到很多自动化的功能（比如验证码自动粘贴/自动给指定微信好友定时发送消息/定时打卡），感兴趣可以去搜一下！ </p> <blockquote><p>Termux combines powerful terminal emulation with an extensive Linux package collection.(Termux)    </p></blockquote><p class="note note-primary">Termux是Android平台上一个强大的终端模拟器，支持 Python、 PHP、 MySQL等的安装，有一篇文章: <a href="https://www.sqlsec.com/2018/05/termux.html" target="_blank" rel="noopener">Termux 高级终端安装使用配置教程|国光</a>，有关Termux的使用写的很详细，推荐一下！</p> <blockquote><p>This plugin(Termux:Tasker)for Termux provides a way to run Termux scripts from Tasker.  </p></blockquote><p class="note note-primary">这个是配合Tasker实现Termux脚本运行自动化的插件。需要注意的是，Termux与插件必须是同一个签名，否则会安装失败。（例如，你不能把Google Play来源的Termux与F-driod来源的插件混用）</p>      <h2 id="构建文件"><a href="#构建文件" class="headerlink" title="构建文件"></a>构建文件</h2><p>思路是和Windows端的实现几乎一致的，也就是在连接到指定Wi-Fi时运行脚本。一样可以用Python脚本/cURL来实现；Tasker还有内置的HTTP-POST，但我对它不太熟悉。  </p><h3 id="第一种：Python-1"><a href="#第一种：Python-1" class="headerlink" title="第一种：Python"></a>第一种：Python</h3><p>构造两个文件，分别为  </p><ol><li>autologin.py  </li><li>auto-login.sh   </li></ol><h4 id="1-autologin-py-1"><a href="#1-autologin-py-1" class="headerlink" title="1. autologin.py"></a>1. autologin.py</h4><p>代码与上文一样。</p><h4 id="2-auto-login-sh"><a href="#2-auto-login-sh" class="headerlink" title="2. auto-login.sh"></a>2. auto-login.sh</h4><p><code>python  /storage/emulated/0/Download/autologin.py</code>     </p><h3 id="第二种：cURL-1"><a href="#第二种：cURL-1" class="headerlink" title="第二种：cURL"></a>第二种：cURL</h3><p>构建一个文件：  </p><h4 id="1-auto-login-sh"><a href="#1-auto-login-sh" class="headerlink" title="1. auto-login.sh"></a>1. auto-login.sh</h4><p>一样是抓包，与上文提到的类似，在Chrome开发者工具中,右击登录相关的字段，选择Copy-&gt;Copy all as cURL(<strong>bash</strong>)，粘贴进文件，脚本就构建好了。（如图）<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/curl.png" srcset="/img/loading.gif" alt="">    </p><h2 id="自动运行-1"><a href="#自动运行-1" class="headerlink" title="自动运行"></a>自动运行</h2><p>无论是哪一种，文件都放在<code>/storage/emulated/0/Download/</code>下。  </p><p>接着运行Termux，执行以下操作。    </p><ol><li>更新安装包   </li></ol><pre><code class="shell">apt updateapt upgrade</code></pre><ol start="2"><li>安装python/cURL<br><code>pkg install python curl</code>  </li><li>安装Requests库 (Python)<br><code>pip install requests</code>     </li><li>在termux里创建目录(termux:task要求自动运行的脚本应当放于<code>~/.termux/tasker</code>下）<br><code>mkdir -p .termux/tasker</code> </li><li>拷贝脚本到<code>~/.termux/tasker</code>目录<br><code>cp /storage/emulated/0/Download/auto-login.sh .termux/tasker</code>  <p class="note note-primary">由于Android10的存储规则，应用只能访问自身和公共存储区域，所以把文件放入指定目录的操作才会如此“曲折 ”。  此外，直接运行Python脚本是会被认为成.sh文件运行的，解决方案之一是在Python脚本开头增加声明"#!/data/data/com.termux/files/usr/bin/python"，但是实测发现，运行会报文件不存在，也不知道是为什么...😓所以Python的方法最终选择用两个脚本文件实现。</p>  </li><li>接着进入Tasker，在配置文件下点击右下角加号，新建“第一条件”-&gt;状态-&gt;网络-&gt;Wifi已连接，在SSID填入对应的Wlan名称。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/taska111.png" srcset="/img/loading.gif" alt="">  <p class="note note-warning">注意，从 Android 6.0 开始，WiFi 的扫描结果需在 GPS 功能开启的前提下才能获取，这意味着你需要打开定位并赋予Tasker定位权限，Tasker才能正确获取到当前连接的网络名称。当然，你也可以选择不填写SSID，但是这会让Tasker连接任意网络时都运行脚本。</p>  </li><li>完成后返回，再新建一个任务，名称如“登陆校园网”，点击右下角加号添加操作-&gt;插件-&gt;Termux:Tasker-&gt;“配置”右侧的编辑按钮，进入插件的界面，填入脚本名称”auto-login.sh “<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/taska222.png" srcset="/img/loading.gif" alt=""></li><li>点击右上角保存按钮，返回到主界面，这时一个在一定条件下触发的操作任务就被保存了。  </li><li>最后不要忘记授予Tasker无障碍权限与自启动权限。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/taska3333.jpg" srcset="/img/loading.gif" alt=""></li></ol><p class="note note-primary">终极的解决方案或许可以是：在一个可以刷第三方固件的路由器上设置一个cURL开机脚本。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Windows</tag>
      
      <tag>Python</tag>
      
      <tag>APP</tag>
      
      <tag>Chrome</tag>
      
      <tag>cURL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从WordPress转至Hexo——记一次网站程序迁移</title>
    <link href="/355/"/>
    <url>/355/</url>
    
    <content type="html"><![CDATA[<h1 id="1-迁移原因"><a href="#1-迁移原因" class="headerlink" title="1.迁移原因"></a>1.迁移原因</h1><p>在不久前，我出于种种考虑，将网站从WordPress迁移至Hexo。<br>倒并非说WordPress有多么不堪，相反的，我个人十分喜爱WordPress，以下是几点原因：</p><ul><li>强大的社区支持<br>如果在使用WordPress的过程中遇到问题，搜索一下往往能得到答案。</li><li>海量的主题与插件适配<br>WordPress有各式各样的主题与插件，能轻松满足各种需求。</li><li>古腾堡编辑器<br>不同于很多人对古腾堡编辑器抱持敌意，我钟爱其编辑区域的区块设计，它提供给我视觉与操作逻辑上的极大舒适感。</li></ul><p>但是，WordPress总让我产生安全性上的担忧。<br>WordPress在全球拥有不俗的流行度。根据<a href="https://w3techs.com/" target="_blank" rel="noopener">W3Techs</a>的数据，截至到2020.4.10，WordPress于CMS市场的占有率为<strong>35.8%</strong>。这在一定意义上促使产生许多专门针对使用此程序的攻击者。<br>烦恼随之而来😐： </p><ul><li>几乎<strong>每天</strong>都会有(机器）人（多数是外国IP）尝试登录我的后台  </li><li>有人会在我的网站“大展神通”，“展示”一系列网站侵入的高端操作  </li><li>外文垃圾评论也是屡禁不止……    </li></ul><p>当然，以上问题都是可解决的。限制登陆次数/类似于WordFence 的安全插件，更改登录地址，做好更新与备份工作，在function.php内插入禁止不含中文的评论的代码等等等等。<br>然而，起初这些“折腾”可能很有趣，但久而久之，这种对抗游戏逐渐变得沉闷而单调。至少对我而言，建立个人网站几乎是兴趣使然。我不希望有什么因素破坏我在整个过程中的好奇心与激情。  </p><p>而Hexo实现了整站的完全静态化，安全也许不再是我需要密切关注的问题。</p><h1 id="2-Hexo安装简介"><a href="#2-Hexo安装简介" class="headerlink" title="2.Hexo安装简介"></a>2.Hexo安装简介</h1><p>再简单谈谈Hexo的安装。  </p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Hexo支持Windows,Mac,Linux。<br>安装Hexo前，要求事先安装的程序如下：  </p><ul><li>Node.js (Node.js 版本不低于 8.10)</li><li>Git  </li></ul><p>接着，在管理员权限下执行以下命令即可安装：<br><code>$ npm install -g hexo-cli</code></p><p>之后，执行以下命令，在你指定的目录下创建网站： </p><h2 id="1-建立网站"><a href="#1-建立网站" class="headerlink" title="1.建立网站"></a>1.建立网站</h2><p>在”folder”目录下建立网站，例如:<code>hexo init c:/website</code>）   </p><p><code>$ hexo init &lt;folder&gt;</code></p><h2 id="2-定位目录"><a href="#2-定位目录" class="headerlink" title="2.定位目录"></a>2.定位目录</h2><p>定位到folder目录  </p><p><code>$ cd &lt;folder&gt;</code> </p><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h2><p>在指定目录下安装依赖文件（也就是”node_modules”文件夹）。   </p><p><code>$ npm install</code>    </p><p>完成后，网站基本创建。可以在_config.yml文件中设定网站的配置信息，例如网站标题(title)，副标题(subtitle),地址(url)等等。<br>有关写作，部署等操作直接看<a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">官方文档</a>吧。<br>常用命令如下(在网站目录下执行)：<br><code>hexo generate</code>(生成静态文件）<br><code>hexo server</code>（本地运行网站）<br><code>hexo deploy</code>（一键部署网站）  </p><h1 id="3-迁移方法"><a href="#3-迁移方法" class="headerlink" title="3.迁移方法"></a>3.迁移方法</h1><p>迁移的流程非常简单，Hexo提供了转换WordPress导出文件的官方插件。以下来自<a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">Hexo的官方文档</a>：  </p><h2 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h2><p>安装 hexo-migrator-wordpress 插件。</p><p><code>$ npm install hexo-migrator-wordpress --save</code></p><h2 id="2-导出数据"><a href="#2-导出数据" class="headerlink" title="2.导出数据"></a>2.导出数据</h2><p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/" target="_blank" rel="noopener">WP支持页面</a>）。</p><h2 id="3-迁移"><a href="#3-迁移" class="headerlink" title="3.迁移"></a>3.迁移</h2><p>插件安装完成后，执行下列命令来迁移所有文章。source 可以是 WordPress 导出文件的路径或网址。</p><p><code>$ hexo migrate wordpress &lt;source&gt;</code></p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WordPress</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让课程表进驻你的手机日历——WakeUp课程表</title>
    <link href="/321/"/>
    <url>/321/</url>
    
    <content type="html"><![CDATA[<p>进入大学后发现，由于大学上课时间、地点的灵活与多变，我时常需要查看我的课程表，查询相关信息。</p><p>这个问题有许多种解决方法， 直接记忆 ，将课程表动手抄下或打印，将课程表截图存至手机/设置为壁纸，使用第三方课程表APP等等。<br>这篇文章意图让课程信息进驻手机日历，并较为直观地显示。<br>在撰写这篇文章的过程中，我参考了互联网的一些内容。<br>你同样可以参考以下的资料，探索不同的方法:  </p><ol><li><a href="https://i.scnu.edu.cn/ical/doc" target="_blank" rel="noopener">iCal 课表使用指引</a><br>该篇文章使用微软Outlook进行多平台的日历同步，同样推荐！<br>（微软大法好！🤣）  </li><li><a href="https://sspai.com/post/59694" target="_blank" rel="noopener">把课程表做成通用日历，灵活安排学习计划</a><br>来自少数派，利用python等提供更加通用的课程导出方案。</li></ol><p>准备：</p><p>  <ul><li>WakeUp课程表（<a href="https://github.com/YZune/WakeupSchedule_Kotlin" target="_blank" rel="noopener">Github</a>/<a href="https://www.coolapk.com/apk/159120" target="_blank" rel="noopener">酷安</a>）  <p class="note note-primary">虽然WakeUp课程表支持广泛（适配 400+ 所高校、8 种通用教务），你可能仍然需要检查其支持范围</p>  </li><li>锤子日历（<a href="https://www.coolapk.com/apk/com.smartisan.calendar" target="_blank" rel="noopener">酷安</a>）    </li></ul><p>或   </p><ul><li>Google日历（<a href="https://www.coolapk.com/apk/com.google.android.calendar" target="_blank" rel="noopener">酷安</a>）   </li></ul><p>或     </p><ul><li>其他支持打开<strong>.ics</strong> 后缀文件的APP</li></ul><ul><li>我的操作环境（参考）：<br>Andriod P (MIUI 10)<p></li></ul><ol><li>打开 Wakeup课程表，点击右上角的导入图标。出现 导入课程 的弹出提示，显示了多种导入方式，这儿我使用“从学校教务导入”。进入“选择学校”界面，选择自己大学的名字/大学相应使用的教务系统。根据提示，在<strong>校园网</strong>的状态下（可以挂校园代理）登录教务系统。如果不出差错的话，课程会被自动导入。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/ics2345.png" srcset="/img/loading.gif" alt=""></li><li>检查一下课程内容是否缺失，课程信息是否准确（有时，开学起始日期会出错，此时点击右上角的汉堡图标，点击当前课表，设置学期开始日期）。<img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/ics13.png" srcset="/img/loading.gif" alt=""></li><li>接着点击右上角的分享图标，出现导出课程的界面，选择“<strong>导出为ICS（日历用）格式</strong>”，便能够将ICS文件导出，默认在<strong>Download</strong>目录（同时也可以将日历文件发送至电脑，使用PC端Outlook导入电脑日历，你可以参考提到的参考资料1）。<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/ics11.png" srcset="/img/loading.gif" alt=""></li><li>使用手机文件管理器找到相应文件，选择“锤子日历”/Google日历 打开（当然手机内置的日历能够打开ICS文件最好不过了）。<img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/ics678.png" srcset="/img/loading.gif" alt=""><br>这儿以锤子日历为例，建议新建一个日历，以免与本地的默认日历混淆，选择相应日历后导入。  </li><li>此时课程信息便被导入手机日历了，你可以打开手机内置的日历APP查看效果，并且设置课程的提醒等。<img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/ics910.png" srcset="/img/loading.gif" alt=""></li></ol><p>在MIUI10中，日历配合负一屏，实现这样的效果：<br><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/img/ics12.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比尔·盖茨：我们未准备好应对下一次病毒爆发</title>
    <link href="/344/"/>
    <url>/344/</url>
    
    <content type="html"><![CDATA[<p> 佩服Bill Gates 前瞻性的目光。他2015年的TED演讲依然能为当下现状提供启示，我们需要利用现代工具构建更加完善的疫情防控系统。</p><p>TED视频观看地址：<a href="https://www.ted.com/talks/bill_gates_the_next_outbreak_we_re_not_ready?language=zh-cn" target="_blank" rel="noopener">TED</a> <a href="https://v.youku.com/v_show/id_XMTI3NDcxNTc1Mg==.html" target="_blank" rel="noopener">优酷</a> <a href="https://www.bilibili.com/video/av84582238" target="_blank" rel="noopener">哔哩哔哩</a></p><blockquote><p><em>在2014年这世界幸免了一场埃博拉病毒的暴发，这都要感谢成千上万无私的卫生工作者的奉献和太好的运气。事后看来我们应该可以做得更好。所以现在正是行动的时候。比尔盖茨建议将我们所有的好主意集合起来付诸行动，例如模拟情景，疫苗研发和卫生工作者训练等等。正如他所说，“无需惊慌，但我们必须未雨绸缪。”</em></p></blockquote><p>以下内容为<strong>比尔·盖茨</strong>演讲全文（中文）：</p><p>当我还是小孩时, 我们最担心的灾害是核战争。 所以我们在地下室有个这样的筒子， 装满了罐头食物和水。 当核战争爆发时， 我们就要躲到地下室去， 蹲低身子并靠那个筒子维生。</p><p>今天的全球灾难最大的危险看起来已不像这样了。 如果有什么东西在未来几十年里可以杀掉上千万人， 那比较有可能是个高度传染的病毒， 而不是战争，不是导弹，而是微生物。</p><p>部分的理由是因为，我们在核威慑上投注了很大的精力和金钱，但是我们在防止疫情的系统上却投资很少，我们还没有准备好预防下一场大疫情的发生。</p><p>让我们看看埃博拉病毒。 我相信大家在报纸上都有读到这样的新闻， 这充满了许多艰难的挑战。 用我们追踪消灭脊髓灰质炎（小儿麻痹）的案例分析工具， 我仔细地追踪这病毒的发展，随着疫情的发展我们可以看到， 问题不在于我们没有一套可以使用的系统， 而是我们根本没有任何系统。</p><p>事实上我们可以看到有几个很明显的不足。 我们找不到一群准备好了的流行病学家， 能去疫区看看病理和病情发展，病例都是由纸上报道传来的，信息传上线时已经很晚了，此外还很不准确。</p><p>我们也找不到训练有素的医护小组，我们没有一套让人们严阵以待的方法。 “无国界医生” 在动员志愿者上做了很大的贡献，但即使如此，我们调动数千名工作者到疫区的速度还是十分差强人意的。</p><p>大的疫情会需要我们动员数十万的人员， 但我们没有任何人在研究治疗的方向，也没有人在看诊断的方法，没有人在想该用什么工具。</p><p>举个例子来说， 我们也许可以抽取生还者的血液， 处理过后，再将血浆注入人体内来保护没得病的人。 但是这个方法从来没有试过， 所以有很多事都还没来得及做，而这的确是全球性的失败。</p><p>世界卫生组织的目的是来监视流行病， 而不是来做我刚讲的事。 但是在电影中演的剧情又是另一回事。 有一群很英俊的流行病学家准备就绪， 他们到了疫区拯救了大家， 但这是纯好莱坞的剧情。</p><p>我们的准备不足 ，可能会导致下一场疫情， 比埃博拉病毒的危害更严重。 让我们看看埃博拉病毒在 过去一年中的发展：大约死了一万人， 所有的死者都在西非的三个国家里。</p><p>病毒之所以没有扩散的原因有三个：</p><ul><li>第一个是卫生工作人员作的舍生忘死，他们竭尽全力，找到很多病人，并防止了更多人得病。</li><li>第二个是病毒的特性， 埃博拉病毒不是靠空气传染的。</li><li>第三个是因为病毒没有传到城市区域。这纯粹是运气好，如果病毒传到了城市， 那么死亡的人数绝对不止于此。</li></ul><p>所以下一次，我们可能不会这么幸运了。有的病毒可能让你毫无察觉，但当感染病毒的人乘飞机或者去逛商场， 他们其实已经具有一定的传染力了。</p><p>此外病毒的来源可以是像埃博拉病毒一样天然的，或是由生物恐怖攻击产生的。 所以可以让疫情惨上千倍的病毒是存在的。</p><p>比如1918年的西班牙流感，病毒会以很快的速度向全世界蔓延，全球有三千万人死于这个疾病。这就是个很严重的问题，我们绝不应该忽视。</p><p>事实上我们可以建立 一个很好的反应系统，我们可以利用所有发展至今的科技和科学：我们可以用手机来收集和发布信息，利用卫星地图可以看到人们在哪里和往哪移动，我们在生物学上的进展可以大幅缩短我们找到病原的时间，并可以在很短的时间里找出解药和疫苗。</p><p>所以我们是有工具的， 但这些工具必须统合在 一个全球健康系统下，此外我们必须处在准备好的状态。而我们如何做好准备， 最好的例子还是来自于备战。</p><p>对军人来说，他们是随时随地都准备好要投入战争的。我们还有预备军人， 能使备战人口大量增加。 北约组织有个机动小组，可以很快地行动起来。</p><p>北约组织有很多战争游戏可以测试人员是否已训练有素，他们是否了解燃油、补给和相同的通信频率？ 是的话，那么他们就已准备好了，这些就是面对疫情时我们该准备的事。</p><p>关键的项目有哪些？</p><ul><li>1、在贫穷的国家，必须有发达的卫生系统：母亲们可以安全地生小孩， 小孩们可以接种疫苗，我们也可以在很早的阶段侦查到疫情的爆发。</li><li>2、我们需要后备医疗部队，还有很多训练有素的专业人员， 随时准备好能带着他们专长到疫区。</li><li>3、可以用军队来配合医护人员， 利用军队移动迅速的特性， 来进行后勤运输和维持安全。</li><li>4、我们也需要进行一些情境模拟，不是进行战争游戏而是进行病菌游戏，看看防卫漏洞在哪。 上一次的病菌游戏是在美国进行的， 那是在2001年了， 进行得也不是很顺利。</li><li>5、最后我们在疫苗和病理学上还需要做很多研发工作。在某些方面，例如腺相关病毒上， 我们已经有了相当的突破， 这可以在很短的时间内生效。</li></ul><p>我目前没有明确的预算这到底需要多少钱， 但是我确信跟损失比起来是比较便宜的。 根据世界银行的估算，如果我们有流感的疫情暴发， 全球经济会损失三万多亿美元，还可能有千百万人员的死亡。</p><p>跟仅仅只是准备好比起来， 这些额外的投资会带来显著的益处。基础的卫生保健、研发， 可以促进全球健康的平衡发展， 让这个世界更健康更安全。</p><p>所以我觉得这非常重要重要，刻不容缓。 我们不需要囤积面罐头、或是躲到地下室去， 但是我们的准备工作必须急起直追，因为时间有限。</p><p>事实上，要说这场埃博拉病毒的疫情带来了什么正面影响的话， 那就是提早响起了警报， 让我们觉醒并做好准备。 我们如果即刻开始准备，那么在下一场疫情来临前我们是可以准备好的。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>这几个浏览器插件，让你在大学抢课事半功倍</title>
    <link href="/291/"/>
    <url>/291/</url>
    
    <content type="html"><![CDATA[<p>本人是一名大一新生，开学早一些的同龄好友已开始军训。 大学里总有几门课程拥有较高的人气值，因而“抢”到它需要大费周折。在这个过程中，学校的在线选课系统由于各种因素，或多或少会产生不稳定的情况。</p><p>昨天就有一位来找到我，希望我帮助她一起抢课。我很愉快地接受邀请。</p><p>工欲善其事，必先利其器。这篇文章主要是推荐我在抢课过程中使用到的浏览器插件。</p><p><strong>需要注意的是，本篇文章仅供参考。选课是大学生活中重要的环节之一，请自行考虑，合理进行操作。作者不保证方法的可靠性，如选课时造成任何后果（包括但不限于没抢到，抢错了，计算机程序故障），作者不承担任何（包括但不限于直接或间接的）责任。</strong></p><p>我好友的情况为：其大学的选课系统十分容易宕机，宕机状态会持续较长的时间。</p><ul><li>操作环境：Windows 10 1809</li><li>浏览器：<a href="https://www.mozilla.org/zh-CN/firefox/" target="_blank" rel="noopener">Firefox（点击下载）</a></li></ul><p><em>为什么使用Firefox？</em></p><p><em>Firefox和Chrome都拥有较好的插件支持。但由于国内网络环境的原因，普通操作下较难登录谷歌Chrome网上应用店。同样思路下，Chrome同样也可实现以下操作。</em></p><p><em>需要注意的是，Firefox的反跟踪功能似乎会误拦截Cookie，在我操作过程中导致了不断从某大学选课系统登出。请根据实际情况进行白名单配置，或改用Chrome。</em></p><h2 id="1-自动填充功能"><a href="#1-自动填充功能" class="headerlink" title="1.自动填充功能"></a>1.自动填充功能</h2><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/112.png" srcset="/img/loading.gif" alt=""></p><p>Firefox自动填充功能</p><p>你一定不想每次登录时都输入一遍账号密码，那么记得在弹出这个框时点击保存。（请在私人电脑上执行此操作，如不得已使用公共电脑，记得事后清除）</p><h2 id="2-ReloadMatic-插件"><a href="#2-ReloadMatic-插件" class="headerlink" title="2. ReloadMatic 插件"></a>2. ReloadMatic 插件</h2><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/22222-1024x652.png" srcset="/img/loading.gif" alt=""></p><p>ReloadMatic，<a href="https://addons.mozilla.org/zh-CN/firefox/addon/reloadmatic/" target="_blank" rel="noopener">点击进入下载页面</a></p><p>手动刷新不可忍，这会消磨抢课的耐心，也会白白浪费精力。为什么不让程序帮你刷新页面呢？你可以在这个过程中听上一首好听的音乐，喝上一杯好喝的咖啡，让自己浮躁不安的心灵平静下来……</p><p>这款插件的功能字面上就可以理解，你可以用它来实现自动刷新。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/1.png" srcset="/img/loading.gif" alt=""></p><p>操作图示</p><p>在你安装了该插件后，你可以右击任意网页，可以看到Reload的选项，在我看来比较丰富。</p><p>你可以选择不同的间隔刷新时间，比如选择”Every 5 secs”，那么就开始进行每五秒一次的刷新操作。</p><p>这里推荐大家选上”Only if unsuccessful”，这样在页面正常显示时程序会自动停止刷新。</p><p>你还能配置”disable cache”，防止因为浏览器缓存出现一些未知情况。</p><h2 id="3-Distill-Web-Monitor-插件"><a href="#3-Distill-Web-Monitor-插件" class="headerlink" title="3.Distill Web Monitor 插件"></a>3.Distill Web Monitor 插件</h2><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/4655432345676543-1024x648.png" srcset="/img/loading.gif" alt=""></p><p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/distill-web-monitor-ff/" target="_blank" rel="noopener">点击进入下载页面</a></p><p>从字面上也不难猜出这款插件的功能。系统长时间宕机时，你不可能在屏幕前白白等候页面的不断刷新，你也许需要一个插件帮助你监控页面的变化情况。</p><p>Distill Web Monitor 就是用来实现这个需求的，你可以通过它实现实时监控页面变化，及时接收网页恢复时的提醒。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/2019-08-31-150721-1024x455.jpg" srcset="/img/loading.gif" alt=""></p><p>模拟页面</p><p>1.现在我模拟了一个逼真的大学系统宕机页面，这个时候你想要在页面恢复时接收提醒，在安装插件后，点击右上角水滴图标。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/43567865432-1024x416.png" srcset="/img/loading.gif" alt=""></p><p>点击后</p><p>2.这个时候可以选择“监控整个页面”。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/2019-08-31-151535-1024x655.jpg" srcset="/img/loading.gif" alt=""></p><p>选择后</p><p>3.这时你可以调节各个参数，如间隔时间，提醒时播放什么音频，甚至可以发送邮件提醒与短信提醒（需要登陆账号，我没有使用）。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/2019-08-31-152345-1024x651.jpg" srcset="/img/loading.gif" alt=""></p><p>4.你可以像我一样将间隔时间设置为5秒，只需滑动滑块。添加条件：检测到页面有“艺航大学”时执行提醒操作。点击保存。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/2019-08-31-152641-1024x568.jpg" srcset="/img/loading.gif" alt=""></p><p>5.保存后，你就可以看到插件开始工作。单击选项卡，你可以看到页面预览。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/image-1024x552.png" srcset="/img/loading.gif" alt=""></p><p>6.这个时候你就可以切换到其他标签页进行其他工作学习。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/image-2-1024x635.png" srcset="/img/loading.gif" alt=""></p><p>7. 当页面恢复时，你会听到一声“ding”，右下角也会弹出提醒。一看，果然页面恢复了。</p><p><img src="https://cdn.jsdelivr.net/gh/wyh2001/wyh2001.github.io@master/wp-content/uploads/2019/08/image-3-1024x551.png" srcset="/img/loading.gif" alt=""></p><p>逼真的页面</p><p>在这个过程中，你不需要将该页面打开在标签页，你只需要保证浏览器运行，插件会自动创建隐形的新标签页进行检查。当然，你最好保持浏览器在主屏幕，缩小化它似乎有延迟。请进行测试正常后使用。</p><p>以上就是我推荐的两款浏览器插件，思路很简单，仅仅旨在抛砖引玉。在Chrome上你同样可以实现相似的操作。 欢迎指出文章不足。 如果你拥有新的思路和想法，也欢迎提出。</p><p>Featured Photo by <a href="https://unsplash.com/@andrewtneel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Andrew Neel</a> on <a href="https://unsplash.com/search/photos/university?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>Firefox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操纵</title>
    <link href="/165/"/>
    <url>/165/</url>
    
    <content type="html"><![CDATA[<p>发现一个恶俗的媒体很容易。只需看新闻标题是夸张还是一针见血，演绎是轻狂还是严谨，记者的镜头又是对准谁——是狂热跳跃的人群之上，娱乐明星和氙气灯，还是人群之中，那个高举“爱与和平”的带着坚毅眼神的中年男子，还是人群之外，那个爬山路的孩子……</p><p>我总以为我能辨清。</p><p>可价值的歪曲与操弄，有时像橡皮泥被小孩随意捏造，不是么?有一位姓杨的人，如今已被主流舆论抨击，销声匿迹。有一日，看到走廊的纸上，刊登了学生对其的声讨，有喜悦，更多的是无奈。我清晰地记得数年前他出过一本书，书中，你若仔细阅读，会发现逻辑的混乱，定义的谬误，但一切经由华丽的文字修饰，虚伪便叫做真诚，勇敢的突然懦弱，忆不起当年他如何在主流媒体中咆哮，这个疯子又如何被人们吹捧为圣人。我那时还是个孩童，深深感到被世界遗弃——“只有我觉得他是坏人？”。孩童的我不解文字的修饰，如今的我看到更多，知道更多，疑问亦是更多。你可以跟着翻开网络媒体的评论区，文革时人群的狂热和集体无意识，你竟然发现它们，如重疾深入骨髓，可怖地仍隐匿今日，为某日的张牙舞爪做准备。历史真的就在那儿，用冷冷的嘲弄的眼神在一旁望着你，看你从前一个阱踏入下一个坑。</p><p>告诉我，你看过视频广告吗?你不必说，你不接触政治，不接触社会新闻，因而不会踏入陷阱。有的汽车厂商会拍摄一组温馨的场景——一个家庭在行驶的车中其乐融融，再来告诉你，好汽车，代表家庭美满。有的手机厂商的广告里，会让一个带着冷峻眼神，着黑色燕尾服的男子高高举起一部黑色手机，俯瞰天下，再来告诉你，好手机彰显一个人的事业成功。暂不提如此的汽车行驶会不会导致事故，这个男子的行为有任何意义，你说，一种交通工具怎么能衡量家庭的幸福，一部通讯设备，怎么就显现地位、名誉了?你可能觉得这些定义确实很可笑，人们也不会因为它们而上当。可配一段优美的钢琴曲呢?剪辑出最感人的画面呢?纳粹不是很多一边聆听音乐，一边认为自己“高雅”、“伟大”吗?你来告诉我，一段精美的，经过商业资本的配置与修饰的视频，会不会把你愚弄，操纵?</p><p>所以我害怕群体的狂热，害怕盲目的跟随，害怕资本的滥用，害怕一切深藏于各种面目之下的操纵。当一部影片感动了数万人时，我会去思索:它是公益纪录片，还是商业包装品?有没有叙述的虚假，有没有观念的强加?人们鼓掌时，我想，我们为何鼓掌，我为何鼓掌，被鼓掌者是否值得鼓掌，是否接受鼓掌。那个比出“酷酷”手势的歌星，他是真的热爱音乐，还是想要歌迷的钱?台下的歌迷是真的热爱他的歌曲，还是脸庞，或是皆有?</p><p>一位同学在饭间向我苦诉互联网公司价值的随意操弄，一位作家在文章中摇摇头，说人没有完全的理性。我认识一位老师也姓杨，他教我们去感悟历史，用理性的眼光去看待历史。尽管价值的操弄在现今随处可见，尽管有文坛的人在对人的完全理性摇头，但还有老师教导学生理性观史，有学生抱怨价值的扭曲，还有人在对抗当代任意形式的操纵。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>祝福</title>
    <link href="/125/"/>
    <url>/125/</url>
    
    <content type="html"><![CDATA[<p>那些黑夜里的奔行的猛士们啊，祝福你们在战场上，啸出最明亮锋利的剑气。 我亦将须臾奔赴。 ——一位即将进入高三的学生</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>新年快乐！</title>
    <link href="/118/"/>
    <url>/118/</url>
    
    <content type="html"><![CDATA[<p>曾于行路遇见过许多种伤痛，许多种欢愉，许多种创生，许多种泯灭，并因而不知多少次咆哮于黑夜，落寞于潇潇。那些回忆如堆叠书本般，杂乱而清晰，使我记起我为何出发，如何到达，因而我不由得常常想要挣脱了那些违背于此的桎梏，并且重立起身来。是的，我曾想将我的爱意与憎恶毫无保留的倾诉，曾想横眉冷对无端指责，曾想让虚无成为足音，让冷漠成为温情……这些有些或许达成了，但更多的在进程中，甚至只于起端。我仍去做，这是出于我对这个世界本身的热爱，并且，总有人会拍拍我的肩膀，告诉我：“没事啊，这算什么？”，使我不畏惧了前行。 2018年已至，我祝福我的每位好友在新年能更接近了自己所希冀的目标，祝愿自己继续前进，向我的方向不断行进。真诚祝福各位新年快乐！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对书的狂想与回忆</title>
    <link href="/112/"/>
    <url>/112/</url>
    
    <content type="html"><![CDATA[<blockquote><p>该篇文章从我平日的随感中选取出，以丰富站点内容。</p></blockquote><p>某次我乘坐出租车外出。司机的行为显得有些特别。他在播放一段音频。不，不是那种震动车身的摇滚音乐，不是午后播音员的八卦趣闻的讲说。那是一个抑扬顿挫的男声把书的一个章节读的风流潇洒。这风流的一分竟还融在那司机浑浊的双眸了。</p><p>某次我去往某座城市。无数次拜访它的街头，每一次给我的印象都是步履匆匆的人和从你身旁甩过去的车辆。还有的是夜晚灯光的现代与魔幻。可我喜同某人去那家图书馆。我轻易的从第一次便能从内置的电脑进入图书馆的图书数据库，把书目的ID发至邮箱，走进内部，穿越幽静，寻得书籍，随意的选取台阶上的一处坐下，融入这一片幽静中。我深感喧哗与浮躁后面，书的文化亦扎根于这所城市的最深处。</p><p>某次我穿过街头，观察到书店巨大的透明玻璃后一排的阅读者，看到他们阅读与思索的神情。可我知道，这家书店的陈列书籍中，有很多是专业书籍，有很多供人娱乐的杂志，让小孩痴迷的漫画书，一整个楼层的教辅。哦，对了，那儿还有购买食物的地方。纯文学，如成人文学与儿童文学，一则隐入边际，一则升入洪荒。资本对书籍的引导令我担忧。</p><p>某次我驻足停留，看到一则宣传语高大得挂最醒目的地方：“  …飘书香…”，一个花枝招展的中年妇女低着头走过去，对着手机可笑地吼叫。</p><p>某次看到某位龙姓作家对德国人的“可怕”描述。她参加了一场关于一本书的交流会。主讲者不断地讲述这本书的内容、情节等等，从下午讲到凌晨，讲到作者本人从现场仓皇逃走。而那位朗读者那刻仍在用他低沉单调的声音念一段小说。</p><p>我看到有人在阅读时眉头微扬，望见灯红酒绿的后面仍有一座城市的根深埋在地下，听说德国的小出版社七天七夜把一本的书的一万多个注解全部核查。可我还看到有人作虚无的舞蹈，有人展刺耳的音喉，有人在楼下无事地踏步，有人在社交网络中发送给我无意义的信息“某某某与某某某宣布恋情”……</p><p>那么有人一定在秋天的萧瑟夜晚里独自行走了。有人曾经想把对洪荒的追索和历史长河的漫游告诉别人的，可孤独的行路者们知道有些人无法同行，有些事不能共步，就算也有人在走，发出踏踏足音，黑暗的寻索却只能一人独行。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>艺航领域开启全站SSL加密</title>
    <link href="/86/"/>
    <url>/86/</url>
    
    <content type="html"><![CDATA[<p>如题。已在全站开启SSL加密。站点访问因而变得更加安全。</p><p>写此文章以纪念。有空写一下过程。</p><p><em>获取SSL证书</em></p><blockquote><p>推荐<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a></p><p><em>Let’s Encrypt is a free, automated, and open certificate authority brought to you by the non-profit Internet Security Research Group (ISRG).</em></p><p>我就在一个子域启用了它作为证书。</p><p>有些VPS面板（如VESTA）自带Let’s Encrypt的证书获取，有些主机商提供免费证书（如我主站的主机商）。如果你有shell权限（你拥有一个VPS等），<a href="https://certbot.eff.org/" target="_blank" rel="noopener">点击这里</a>来获取操作提示。如果你的主机商未提供免费的证书或你没有shell权限，可能你需要寻找其他证书提供商或换个主机。</p><p>需要注意的是，Chrome 不再信任WoSign，StartCom，Symantec证书。</p></blockquote><p><em>.htaccess增加以下代码</em>  </p><pre><code class="hljs apache"><span class="hljs-comment"># 强制 HTTPS</span><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">On</span><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTPS&#125;</span> <span class="hljs-literal">off</span><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> (.*) https://<span class="hljs-variable">%&#123;HTTP\_HOST&#125;</span><span class="hljs-variable">%&#123;REQUEST\_URI&#125;</span> \[R=301,L\]</code></pre><p><em>wp-config.php增加以下代码</em></p><pre><code class="hljs lasso"><span class="hljs-comment">/* 强制后台和登录使用 SSL */</span><span class="hljs-class"><span class="hljs-keyword">define</span></span>(<span class="hljs-string">'FORCE\_SSL\_LOGIN'</span>, <span class="hljs-literal">true</span>);<span class="hljs-class"><span class="hljs-keyword">define</span></span>(<span class="hljs-string">'FORCE\_SSL\_ADMIN'</span>, <span class="hljs-literal">true</span>);</code></pre><p><em>后台WordPress地址更正为HTTPS地址</em></p><p><em>（可选,我没有使用）更正图片地址</em>  </p><p>在主题functions.php加入</p><pre><code class="hljs reasonml"><span class="hljs-comment">/* 替换图片链接为 https */</span><span class="hljs-keyword">function</span> my\_content\<span class="hljs-constructor">_manipulator($<span class="hljs-params">content</span>)</span>&#123;<span class="hljs-keyword">if</span>( is<span class="hljs-constructor">_ssl()</span> )&#123;$content = str<span class="hljs-constructor">_replace('<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">www</span>.<span class="hljs-params">yourdomain</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">wp</span>-<span class="hljs-params">content</span><span class="hljs-operator">/</span><span class="hljs-params">uploads</span>', '<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">www</span>.<span class="hljs-params">yourdomain</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">wp</span>-<span class="hljs-params">content</span><span class="hljs-operator">/</span><span class="hljs-params">uploads</span>', $<span class="hljs-params">content</span>)</span>;&#125;return $content;&#125;add\<span class="hljs-constructor">_filter('<span class="hljs-params">the</span>\<span class="hljs-params">_content</span>', '<span class="hljs-params">my</span>\<span class="hljs-params">_content</span>\<span class="hljs-params">_manipulator</span>')</span>;</code></pre><p><em>浏览网站，使用如Chrome中的开发者工具查找未加密的资源并修正。</em></p><p><img src="https://yharea.com/wp-content/uploads/2018/09/screenshot.png" srcset="/img/loading.gif" alt=""></p><p>未加密的图像资源</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSL</tag>
      
      <tag>WordPress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对抗Android毒瘤——启用黑域APP教程</title>
    <link href="/71/"/>
    <url>/71/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于<a href="https://www.ithome.com/html/android/320731.htm" target="_blank" rel="noopener">IT之家</a></p><p>Android系统上总会有许多应用喜欢挤占运行内存，并且不断自启，令人头疼不已。黑域是一个针对此情况的一个应用，貌似效果还不错，不过该APP的开启需要用到ADB，有一些人可能没有接触过。因此想做个简单的教程。</p></blockquote><blockquote><p>准备：</p></blockquote><ul><li>WINDOWS（MAC与LINUX也可以，这儿教程不一定适用）</li><li>使用 Android 5.0或以上的系统</li><li>安装 黑域</li><li>ADB（<a href="https://developer.android.google.cn/studio/releases/platform-tools.html" target="_blank" rel="noopener">点我下载</a>）</li><li>退出可能导致冲突的电脑程序（如XX手机助手）</li></ul><blockquote><p>步骤：</p></blockquote><blockquote><p>一：连接手机，打开USB 调试，确保手机连接至电脑</p></blockquote><p><a href="http://yharea.com/wp-content/uploads/2018/09/截图.png"><img src="http://yharea.com/wp-content/uploads/2018/09/%E6%88%AA%E5%9B%BE.png" srcset="/img/loading.gif" alt=""></a></p><blockquote><p>二：解压缩ADB 文件，在解压的目录打开命令提示符（或POWERSHELL），打开方法就是按住“Shift”单击右键于目录。</p></blockquote><p><img src="http://yharea.com/wp-content/uploads/2018/09/%E6%8D%95%E8%8E%B7154154.png" srcset="/img/loading.gif" alt=""></p><blockquote><p>确保手机与电脑正常连接，并且进行授权。</p></blockquote><p><a href="https://yharea.com/wp-content/uploads/2017/08/ghjklgfhjklhjk.jpg"><img src="https://yharea.com/wp-content/uploads/2017/08/ghjklgfhjklhjk.jpg" srcset="/img/loading.gif" alt=""></a></p><blockquote><p>（选择是）</p></blockquote><p> 输入 <code>adb devices</code>查看是否设备连接（power shell在命令前加上“.\”）</p><p><a href="http://yharea.com/wp-content/uploads/2018/09/32132获.png"><img src="http://yharea.com/wp-content/uploads/2018/09/32132%E8%8E%B7.png" srcset="/img/loading.gif" alt=""></a></p><blockquote><p>（未授权）</p></blockquote><p><a href="http://yharea.com/wp-content/uploads/2018/09/捕获5555.png"><img src="http://yharea.com/wp-content/uploads/2018/09/%E6%8D%95%E8%8E%B75555.png" srcset="/img/loading.gif" alt=""></a></p><p>（正常）</p><p>（如果没有就表示没有连接，或许是没有安装驱动，可以上手机厂商官网下载，也可以下载XX手机助手帮你自动下载）</p><p>若已连接</p><p>(如果是CMD，输入）</p><pre><code class="hljs adb">(如果是POWER SHELL，输入  )&#96;&#96;&#96; .\ adb -d shell sh &#x2F;data&#x2F;data&#x2F;me.piebridge.brevent&#x2F;brevent.sh</code></pre><p><a href="http://yharea.com/wp-content/uploads/2018/09/捕获544554.png"><img src="http://yharea.com/wp-content/uploads/2018/09/%E6%8D%95%E8%8E%B7544554.png" srcset="/img/loading.gif" alt=""></a></p><p>回车。</p><p><a href="http://yharea.com/wp-content/uploads/2018/09/捕获5555.png"><img src="http://yharea.com/wp-content/uploads/2018/09/%E6%8D%95%E8%8E%B75555.png" srcset="/img/loading.gif" alt=""></a></p><p>成功。手机上可以使用了。</p><p>使用：如要黑域“黑域”，点击应用，选择“选择”，点击上方的禁止图像就行了。取消黑域点击圈圈。</p><p><a href="https://yharea.com/wp-content/uploads/2017/08/Screenshot_2017-08-10-22-09-09.png"><img src="https://yharea.com/wp-content/uploads/2017/08/Screenshot_2017-08-10-22-09-09.png" srcset="/img/loading.gif" alt=""></a></p><blockquote><p>（顺便一提，黑域起作用是不需要黑域的程序在后台的）</p></blockquote><p>也有其他开启方法，如ROOT直接启动（按下返回键七次），或者直接手机端执行脚本（用RE浏览器定位到脚本，直接运行），但更多使用细节不阐述了，可以自行查询资料。</p><blockquote><p>再推荐几个治毒瘤的应用：</p></blockquote><ul><li>阻止运行</li><li>绿色守护</li><li>冰箱</li><li>My Android tools</li><li>……</li></ul><p>另附一个批处理，你可以直接在目录运行之来代替命令，方便一些。（毕竟每次重启黑域都会失效）</p><p>（链接: <a href="https://pan.baidu.com/s/1eSviDhC" target="_blank" rel="noopener">https://pan.baidu.com/s/1eSviDhC</a> 密码: mhmu）</p><p>PS：预览图是我P的（滑稽）</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Chrome关闭推荐文章</title>
    <link href="/63/"/>
    <url>/63/</url>
    
    <content type="html"><![CDATA[<p><span class="label label-warning">2020年7月2日更新：最新版本已无法完全关闭。可选择点按隐藏。</span></p><p>Android Chrome网址栏输入</p><p> <code>chrome://flags/#enable-ntp-remote-suggestions</code></p><p>进入以后，选择 Disable ，重启即可关闭推荐文章。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>Android</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，世界！</title>
    <link href="/35/"/>
    <url>/35/</url>
    
    <content type="html"><![CDATA[<p>很久之前便接触了网站建设。 我的首个网站用于转载科技新闻，表达我对科技的观点。 艺航领域是我的第二个网站，作为我的个人博客。 现在是一名忙碌的高中生，希望在此与每一位分享我的欢喜与忧伤。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
